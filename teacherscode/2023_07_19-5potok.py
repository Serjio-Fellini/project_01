# -*- coding: utf-8 -*-
"""19_07_2023_5potok.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KAzHR6Qot7FBpetT0CCRqHKbgFs4-XK2
"""

# Задача 1. Создать БД и таблицы
import sqlite3

connection = sqlite3.connect("teachers.db")
cursor = connection.cursor()
query = """INSERT INTO Teacher (Teacher_Id, Teacher_Name, School_Id, Joining_Date, Speciality, Salary, Experience)
VALUES
('101', 'Галина', '1', '2021-2-10', 'Физик', '40000', NULL),
('102', 'Мария', '1', '2018-07-23', 'Химик', '20000', NULL),
('103', 'Ольга', '2', '2022-05-19', 'Информатик', '25000', NULL),
('104', 'Полина', '2', '2017-12-28', 'Физик', '28000', NULL),
('105', 'Лидия', '3', '2015-06-04', 'Информатик', '42000', NULL),
('106', 'Анастасия', '3', '2019-09-11', 'Учитель трудов', '30000', NULL),
('107', 'Ирина', '4', '2020-08-21', 'Информатик', '32000', NULL),
('108', 'Виктория', '4', '2017-10-17', 'Географ', '30000', NULL);"""
cursor.execute(query)
connection.commit()
connection.close()

# Задача 2. Подключиться к БД и вывести ее версию
import sqlite3

def get_connection():
  connection = sqlite3.connect("teachers.db")
  return connection

def close_connection(connection):
  if connection:
    connection.close()

def read_db_version():
  try:
    connection = get_connection()
    cursor = connection.cursor()
    cursor.execute("SELECT sqlite_version();")
    version = cursor.fetchone()
    print ("Вы подключились к SQLite версии: ", version)
    close_connection(connection)
  except (Exception, sqlite3.Error) as error:
    print ("Ошибка в получении данных: ", error)

read_db_version()

# Тест
import sqlite3

def get_connection():
  connection = sqlite3.connect("teachers.db")
  return connection

def close_connection(connection):
  if connection:
    connection.close()

def read_db_version():
  try:
    connection = get_connection()
    cursor = connection.cursor()
    cursor.execute("SELECT * FROM Teacher;")
    records = cursor.fetchall()
    print (records)
    close_connection(connection)
  except (Exception, sqlite3.Error) as error:
    print ("Ошибка в получении данных: ", error)

read_db_version()

#Задача 3. Проставить опыт работы всем учителям
import sqlite3

def get_connection():
  connection = sqlite3.connect("teachers.db")
  return connection

def close_connection(connection):
  if connection:
    connection.close()

def upd_exp():
  connection = get_connection()
  cursor = connection.cursor()
  cursor.execute("UPDATE Teacher SET Experience = 20 WHERE School_Id = 4")
  connection.commit()
  connection.close()

upd_exp()

# Задача 4. Вывести данные о школе и учителе, используя идентификатор школы и идентификатор учителя
import sqlite3

def get_connection():
  connection = sqlite3.connect("teachers.db")
  return connection

def close_connection(connection):
  if connection:
    connection.close()

def get_school_info(school_id):
  try:
    connection = get_connection()
    cursor = connection.cursor()
    sql_query = "SELECT * FROM School WHERE School_Id = ?"
    cursor.execute(sql_query,(school_id,))
    records = cursor.fetchall()
    close_connection(connection)
    print ("Данные по школе")
    for row in records:
      print ("ID школы:", row[0])
      print ("Название школы:", row[1])
      print ("Количество мест:", row[2])
  except (Exception, sqlite3.Error) as error:
    print ("Ошибка в получении данных: ", error)


def get_teacher_info(teacher_id):
  try:
    connection = get_connection()
    cursor = connection.cursor()
    sql_query = "SELECT * FROM Teacher WHERE Teacher_Id = ?"
    cursor.execute(sql_query,(teacher_id,))
    records = cursor.fetchall()
    close_connection(connection)
    print ("Данные по учителю")
    for row in records:
      print ("ID Учителя:", row[0])
      print ("Имя учителя:", row[1])
      print ("ID школы:", row[2])
      print ("Дата начала работы:", row[3])
      print ("Специализация:", row[4])
      print ("Зарплата:", row[5])
      print ("Опыт работы:", row[6])
  except (Exception, sqlite3.Error) as error:
    print ("Ошибка в получении данных: ", error)

get_school_info(1)
get_teacher_info(101)

# Задача 5. Вывести список учителей по заданной специальности и зарплате
import sqlite3

def get_connection():
  connection = sqlite3.connect("teachers.db")
  return connection

def close_connection(connection):
  if connection:
    connection.close()

def teacher_list(specialty, salary):
  try:
    connection = get_connection()
    cursor = connection.cursor()
    sql_query = "SELECT * FROM Teacher WHERE Speciality = ? AND Salary > ?"
    cursor.execute(sql_query,(specialty, salary))
    records = cursor.fetchall()
    close_connection(connection)
    print ("Данные учителя со спецальностью", specialty, "и зарплатой больше чем", salary, "\n")
    for row in records:
      print ("ID Учителя:", row[0])
      print ("Имя учителя:", row[1])
      print ("ID школы:", row[2])
      print ("Дата начала работы:", row[3])
      print ("Специализация:", row[4])
      print ("Зарплата:", row[5])
      print ("Опыт работы:", row[6],"\n")
  except (Exception, sqlite3.Error) as error:
    print ("Ошибка в получении данных: ", error)

teacher_list("Физик", 10000)

# Задача 6. Вывести список учителей по ID школы (1 метод через 2 функции)
import sqlite3

def get_connection():
  connection = sqlite3.connect("teachers.db")
  return connection

def close_connection(connection):
  if connection:
    connection.close()

def get_school_name(school_id):
  try:
    connection = get_connection()
    cursor = connection.cursor()
    sql_query = "SELECT * FROM School WHERE School_Id = ?"
    cursor.execute(sql_query,(school_id,))
    records = cursor.fetchone()
    close_connection(connection)
    return records[1]
  except (Exception, sqlite3.Error) as error:
    print ("Ошибка в получении данных: ", error)

def get_teacher(school_id):
  try:
    connection = get_connection()
    cursor = connection.cursor()
    sql_query = "SELECT * FROM Teacher WHERE School_Id = ?"
    cursor.execute(sql_query,(school_id,))
    records = cursor.fetchall()
    close_connection(connection)
    print ("Данные по учителю")
    for row in records:
      print ("ID Учителя:", row[0])
      print ("Имя учителя:", row[1])
      print ("ID школы:", row[2])
      print ("Название школы:", get_school_name(row[2]))
      print ("Дата начала работы:", row[3])
      print ("Специализация:", row[4])
      print ("Зарплата:", row[5])
      print ("Опыт работы:", row[6], '\n')
  except (Exception, sqlite3.Error) as error:
    print ("Ошибка в получении данных: ", error)

get_teacher(4)

# Задача 6. Вывести список учителей по ID школы (2 метод через join)
import sqlite3

def get_connection():
  connection = sqlite3.connect("teachers.db")
  return connection

def close_connection(connection):
  if connection:
    connection.close()

def join_method(school_id):
  try:
    connection = get_connection()
    cursor = connection.cursor()
    sql_query = "SELECT * FROM Teacher JOIN School ON Teacher.School_Id = School.School_Id WHERE Teacher.School_Id = ?"
    cursor.execute(sql_query,(school_id,))
    records = cursor.fetchall()
    close_connection(connection)
    print ("Данные по учителю")
    for row in records:
      print ("ID Учителя:", row[0])
      print ("Имя учителя:", row[1])
      print ("ID школы:", row[2])
      print ("Название школы:", row[8])
      print ("Дата начала работы:", row[3])
      print ("Специализация:", row[4])
      print ("Зарплата:", row[5])
      print ("Опыт работы:", row[6], '\n')
  except (Exception, sqlite3.Error) as error:
    print ("Ошибка в получении данных: ", error)

join_method(2)

# Определение названия таблиц
import sqlite3

def get_connection():
  connection = sqlite3.connect("teachers.db")
  return connection

def close_connection(connection):
  if connection:
    connection.close()

def tablename():
  try:
    connection = get_connection()
    cursor = connection.cursor()
    sql_query = """SELECT * FROM sqlite_master
    WHERE type = 'table';"""
    cursor.execute(sql_query)
    records = cursor.fetchall()
    close_connection(connection)
    for table in records:
      print (table)
  except (Exception, sqlite3.Error) as error:
    print ("Ошибка в получении данных: ", error)

tablename()

# Определение названия cтолбцов
import sqlite3

def get_connection():
  connection = sqlite3.connect("teachers.db")
  return connection

def close_connection(connection):
  if connection:
    connection.close()

def columnname():
  connection = get_connection()
  cursor = connection.execute('SELECT * FROM Teacher;')
  namescolum = cursor.description
  close_connection(connection)
  print (type(namescolum))
  for row in namescolum:
    print(row[0])

columnname()